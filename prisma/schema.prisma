// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String?
  role      String   @default("CHILD") // "PARENT" | "CHILD"
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  parentId String?
  parent   User?   @relation("UserParent", fields: [parentId], references: [id])
  children User[]  @relation("UserParent")
  
  // 其他关联
  habits              Habit[]
  taskCompletions     TaskCompletion[]
  pointTransactions   PointTransaction[]
  rewardRedemptions   RewardRedemption[]
  createdRewards      Reward[]           @relation("RewardCreator")
  
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// 手机验证表
model PhoneVerification {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("phone_verifications")
}

// 习惯表
model Habit {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tasks           Task[]
  taskCompletions TaskCompletion[]

  @@map("habits")
}

// 任务表
model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联
  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  
  taskCompletions TaskCompletion[]

  @@map("tasks")
}

// 任务完成记录表
model TaskCompletion {
  id            String   @id @default(cuid())
  completedDate String   // 格式: YYYY-MM-DD
  completedAt   DateTime @default(now())
  
  // 关联
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId  String
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId, completedDate], name: "taskId_userId_completedDate")
  @@map("task_completions")
}

// 积分交易记录表
model PointTransaction {
  id          String   @id @default(cuid())
  amount      Int
  type        String   // "EARN" | "SPEND"
  description String
  createdAt   DateTime @default(now())
  
  // 关联
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_transactions")
}

// 奖励表
model Reward {
  id          String   @id @default(cuid())
  name        String
  description String
  points      Int
  type        String   // "BADGE" | "PHYSICAL" | "CUSTOM"
  image       String?
  isActive    Boolean  @default(true)
  isGlobal    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联
  creatorId String?
  creator   User?   @relation("RewardCreator", fields: [creatorId], references: [id])
  
  rewardRedemptions RewardRedemption[]

  @@map("rewards")
}

// 奖励兑换记录表
model RewardRedemption {
  id         String   @id @default(cuid())
  redeemedAt DateTime @default(now())
  
  // 关联
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  rewardId String
  reward   Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@unique([userId, rewardId])
  @@map("reward_redemptions")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
